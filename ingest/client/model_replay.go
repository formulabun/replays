/*
GoBun File Info

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Replay struct for Replay
type Replay struct {
	Title *string `json:"Title,omitempty"`
	GameMap *float32 `json:"GameMap,omitempty"`
	Time *float32 `json:"Time,omitempty"`
	Lap *float32 `json:"Lap,omitempty"`
	PlayerEntries []PlayerEntry `json:"PlayerEntries,omitempty"`
}

// NewReplay instantiates a new Replay object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReplay() *Replay {
	this := Replay{}
	return &this
}

// NewReplayWithDefaults instantiates a new Replay object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReplayWithDefaults() *Replay {
	this := Replay{}
	return &this
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *Replay) GetTitle() string {
	if o == nil || o.Title == nil {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Replay) GetTitleOk() (*string, bool) {
	if o == nil || o.Title == nil {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *Replay) HasTitle() bool {
	if o != nil && o.Title != nil {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *Replay) SetTitle(v string) {
	o.Title = &v
}

// GetGameMap returns the GameMap field value if set, zero value otherwise.
func (o *Replay) GetGameMap() float32 {
	if o == nil || o.GameMap == nil {
		var ret float32
		return ret
	}
	return *o.GameMap
}

// GetGameMapOk returns a tuple with the GameMap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Replay) GetGameMapOk() (*float32, bool) {
	if o == nil || o.GameMap == nil {
		return nil, false
	}
	return o.GameMap, true
}

// HasGameMap returns a boolean if a field has been set.
func (o *Replay) HasGameMap() bool {
	if o != nil && o.GameMap != nil {
		return true
	}

	return false
}

// SetGameMap gets a reference to the given float32 and assigns it to the GameMap field.
func (o *Replay) SetGameMap(v float32) {
	o.GameMap = &v
}

// GetTime returns the Time field value if set, zero value otherwise.
func (o *Replay) GetTime() float32 {
	if o == nil || o.Time == nil {
		var ret float32
		return ret
	}
	return *o.Time
}

// GetTimeOk returns a tuple with the Time field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Replay) GetTimeOk() (*float32, bool) {
	if o == nil || o.Time == nil {
		return nil, false
	}
	return o.Time, true
}

// HasTime returns a boolean if a field has been set.
func (o *Replay) HasTime() bool {
	if o != nil && o.Time != nil {
		return true
	}

	return false
}

// SetTime gets a reference to the given float32 and assigns it to the Time field.
func (o *Replay) SetTime(v float32) {
	o.Time = &v
}

// GetLap returns the Lap field value if set, zero value otherwise.
func (o *Replay) GetLap() float32 {
	if o == nil || o.Lap == nil {
		var ret float32
		return ret
	}
	return *o.Lap
}

// GetLapOk returns a tuple with the Lap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Replay) GetLapOk() (*float32, bool) {
	if o == nil || o.Lap == nil {
		return nil, false
	}
	return o.Lap, true
}

// HasLap returns a boolean if a field has been set.
func (o *Replay) HasLap() bool {
	if o != nil && o.Lap != nil {
		return true
	}

	return false
}

// SetLap gets a reference to the given float32 and assigns it to the Lap field.
func (o *Replay) SetLap(v float32) {
	o.Lap = &v
}

// GetPlayerEntries returns the PlayerEntries field value if set, zero value otherwise.
func (o *Replay) GetPlayerEntries() []PlayerEntry {
	if o == nil || o.PlayerEntries == nil {
		var ret []PlayerEntry
		return ret
	}
	return o.PlayerEntries
}

// GetPlayerEntriesOk returns a tuple with the PlayerEntries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Replay) GetPlayerEntriesOk() ([]PlayerEntry, bool) {
	if o == nil || o.PlayerEntries == nil {
		return nil, false
	}
	return o.PlayerEntries, true
}

// HasPlayerEntries returns a boolean if a field has been set.
func (o *Replay) HasPlayerEntries() bool {
	if o != nil && o.PlayerEntries != nil {
		return true
	}

	return false
}

// SetPlayerEntries gets a reference to the given []PlayerEntry and assigns it to the PlayerEntries field.
func (o *Replay) SetPlayerEntries(v []PlayerEntry) {
	o.PlayerEntries = v
}

func (o Replay) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Title != nil {
		toSerialize["Title"] = o.Title
	}
	if o.GameMap != nil {
		toSerialize["GameMap"] = o.GameMap
	}
	if o.Time != nil {
		toSerialize["Time"] = o.Time
	}
	if o.Lap != nil {
		toSerialize["Lap"] = o.Lap
	}
	if o.PlayerEntries != nil {
		toSerialize["PlayerEntries"] = o.PlayerEntries
	}
	return json.Marshal(toSerialize)
}

type NullableReplay struct {
	value *Replay
	isSet bool
}

func (v NullableReplay) Get() *Replay {
	return v.value
}

func (v *NullableReplay) Set(val *Replay) {
	v.value = val
	v.isSet = true
}

func (v NullableReplay) IsSet() bool {
	return v.isSet
}

func (v *NullableReplay) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReplay(val *Replay) *NullableReplay {
	return &NullableReplay{value: val, isSet: true}
}

func (v NullableReplay) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReplay) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


