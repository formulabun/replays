/*
GoBun File Info

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// PlayerEntry struct for PlayerEntry
type PlayerEntry struct {
	Name *string `json:"Name,omitempty"`
	Skin *string `json:"Skin,omitempty"`
	Color *string `json:"Color,omitempty"`
	Score *float32 `json:"Score,omitempty"`
	Speed *float32 `json:"Speed,omitempty"`
	Weight *float32 `json:"Weight,omitempty"`
}

// NewPlayerEntry instantiates a new PlayerEntry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlayerEntry() *PlayerEntry {
	this := PlayerEntry{}
	return &this
}

// NewPlayerEntryWithDefaults instantiates a new PlayerEntry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlayerEntryWithDefaults() *PlayerEntry {
	this := PlayerEntry{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PlayerEntry) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayerEntry) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PlayerEntry) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PlayerEntry) SetName(v string) {
	o.Name = &v
}

// GetSkin returns the Skin field value if set, zero value otherwise.
func (o *PlayerEntry) GetSkin() string {
	if o == nil || o.Skin == nil {
		var ret string
		return ret
	}
	return *o.Skin
}

// GetSkinOk returns a tuple with the Skin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayerEntry) GetSkinOk() (*string, bool) {
	if o == nil || o.Skin == nil {
		return nil, false
	}
	return o.Skin, true
}

// HasSkin returns a boolean if a field has been set.
func (o *PlayerEntry) HasSkin() bool {
	if o != nil && o.Skin != nil {
		return true
	}

	return false
}

// SetSkin gets a reference to the given string and assigns it to the Skin field.
func (o *PlayerEntry) SetSkin(v string) {
	o.Skin = &v
}

// GetColor returns the Color field value if set, zero value otherwise.
func (o *PlayerEntry) GetColor() string {
	if o == nil || o.Color == nil {
		var ret string
		return ret
	}
	return *o.Color
}

// GetColorOk returns a tuple with the Color field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayerEntry) GetColorOk() (*string, bool) {
	if o == nil || o.Color == nil {
		return nil, false
	}
	return o.Color, true
}

// HasColor returns a boolean if a field has been set.
func (o *PlayerEntry) HasColor() bool {
	if o != nil && o.Color != nil {
		return true
	}

	return false
}

// SetColor gets a reference to the given string and assigns it to the Color field.
func (o *PlayerEntry) SetColor(v string) {
	o.Color = &v
}

// GetScore returns the Score field value if set, zero value otherwise.
func (o *PlayerEntry) GetScore() float32 {
	if o == nil || o.Score == nil {
		var ret float32
		return ret
	}
	return *o.Score
}

// GetScoreOk returns a tuple with the Score field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayerEntry) GetScoreOk() (*float32, bool) {
	if o == nil || o.Score == nil {
		return nil, false
	}
	return o.Score, true
}

// HasScore returns a boolean if a field has been set.
func (o *PlayerEntry) HasScore() bool {
	if o != nil && o.Score != nil {
		return true
	}

	return false
}

// SetScore gets a reference to the given float32 and assigns it to the Score field.
func (o *PlayerEntry) SetScore(v float32) {
	o.Score = &v
}

// GetSpeed returns the Speed field value if set, zero value otherwise.
func (o *PlayerEntry) GetSpeed() float32 {
	if o == nil || o.Speed == nil {
		var ret float32
		return ret
	}
	return *o.Speed
}

// GetSpeedOk returns a tuple with the Speed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayerEntry) GetSpeedOk() (*float32, bool) {
	if o == nil || o.Speed == nil {
		return nil, false
	}
	return o.Speed, true
}

// HasSpeed returns a boolean if a field has been set.
func (o *PlayerEntry) HasSpeed() bool {
	if o != nil && o.Speed != nil {
		return true
	}

	return false
}

// SetSpeed gets a reference to the given float32 and assigns it to the Speed field.
func (o *PlayerEntry) SetSpeed(v float32) {
	o.Speed = &v
}

// GetWeight returns the Weight field value if set, zero value otherwise.
func (o *PlayerEntry) GetWeight() float32 {
	if o == nil || o.Weight == nil {
		var ret float32
		return ret
	}
	return *o.Weight
}

// GetWeightOk returns a tuple with the Weight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayerEntry) GetWeightOk() (*float32, bool) {
	if o == nil || o.Weight == nil {
		return nil, false
	}
	return o.Weight, true
}

// HasWeight returns a boolean if a field has been set.
func (o *PlayerEntry) HasWeight() bool {
	if o != nil && o.Weight != nil {
		return true
	}

	return false
}

// SetWeight gets a reference to the given float32 and assigns it to the Weight field.
func (o *PlayerEntry) SetWeight(v float32) {
	o.Weight = &v
}

func (o PlayerEntry) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["Name"] = o.Name
	}
	if o.Skin != nil {
		toSerialize["Skin"] = o.Skin
	}
	if o.Color != nil {
		toSerialize["Color"] = o.Color
	}
	if o.Score != nil {
		toSerialize["Score"] = o.Score
	}
	if o.Speed != nil {
		toSerialize["Speed"] = o.Speed
	}
	if o.Weight != nil {
		toSerialize["Weight"] = o.Weight
	}
	return json.Marshal(toSerialize)
}

type NullablePlayerEntry struct {
	value *PlayerEntry
	isSet bool
}

func (v NullablePlayerEntry) Get() *PlayerEntry {
	return v.value
}

func (v *NullablePlayerEntry) Set(val *PlayerEntry) {
	v.value = val
	v.isSet = true
}

func (v NullablePlayerEntry) IsSet() bool {
	return v.isSet
}

func (v *NullablePlayerEntry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlayerEntry(val *PlayerEntry) *NullablePlayerEntry {
	return &NullablePlayerEntry{value: val, isSet: true}
}

func (v NullablePlayerEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlayerEntry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


