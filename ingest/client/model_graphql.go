/*
GoBun File Info

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Graphql struct for Graphql
type Graphql struct {
	Data map[string]interface{} `json:"data,omitempty"`
	Errors []map[string]interface{} `json:"errors,omitempty"`
}

// NewGraphql instantiates a new Graphql object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGraphql() *Graphql {
	this := Graphql{}
	return &this
}

// NewGraphqlWithDefaults instantiates a new Graphql object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGraphqlWithDefaults() *Graphql {
	this := Graphql{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *Graphql) GetData() map[string]interface{} {
	if o == nil || o.Data == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Graphql) GetDataOk() (map[string]interface{}, bool) {
	if o == nil || o.Data == nil {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *Graphql) HasData() bool {
	if o != nil && o.Data != nil {
		return true
	}

	return false
}

// SetData gets a reference to the given map[string]interface{} and assigns it to the Data field.
func (o *Graphql) SetData(v map[string]interface{}) {
	o.Data = v
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *Graphql) GetErrors() []map[string]interface{} {
	if o == nil || o.Errors == nil {
		var ret []map[string]interface{}
		return ret
	}
	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Graphql) GetErrorsOk() ([]map[string]interface{}, bool) {
	if o == nil || o.Errors == nil {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *Graphql) HasErrors() bool {
	if o != nil && o.Errors != nil {
		return true
	}

	return false
}

// SetErrors gets a reference to the given []map[string]interface{} and assigns it to the Errors field.
func (o *Graphql) SetErrors(v []map[string]interface{}) {
	o.Errors = v
}

func (o Graphql) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	if o.Errors != nil {
		toSerialize["errors"] = o.Errors
	}
	return json.Marshal(toSerialize)
}

type NullableGraphql struct {
	value *Graphql
	isSet bool
}

func (v NullableGraphql) Get() *Graphql {
	return v.value
}

func (v *NullableGraphql) Set(val *Graphql) {
	v.value = val
	v.isSet = true
}

func (v NullableGraphql) IsSet() bool {
	return v.isSet
}

func (v *NullableGraphql) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGraphql(val *Graphql) *NullableGraphql {
	return &NullableGraphql{value: val, isSet: true}
}

func (v NullableGraphql) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGraphql) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


